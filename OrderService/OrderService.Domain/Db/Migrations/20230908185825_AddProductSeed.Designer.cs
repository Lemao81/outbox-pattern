// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using OrderService.Domain.Db;

#nullable disable

namespace OrderService.Domain.Db.Migrations
{
    [DbContext(typeof(OrderServiceDbContext))]
    [Migration("20230908185825_AddProductSeed")]
    partial class AddProductSeed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("OrderProduct", b =>
                {
                    b.Property<Guid>("OrdersId")
                        .HasColumnType("uuid")
                        .HasColumnName("orders_id");

                    b.Property<Guid>("ProductsId")
                        .HasColumnType("uuid")
                        .HasColumnName("products_id");

                    b.HasKey("OrdersId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("order_product", (string)null);
                });

            modelBuilder.Entity("OrderService.Domain.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric")
                        .HasColumnName("total_amount");

                    b.HasKey("Id");

                    b.ToTable("orders", (string)null);
                });

            modelBuilder.Entity("OrderService.Domain.Models.Outbox", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid")
                        .HasColumnName("entity_id");

                    b.Property<string>("Event")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("event");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.HasKey("Id");

                    b.ToTable("outbox", (string)null);
                });

            modelBuilder.Entity("OrderService.Domain.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("category");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("modified_at");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.HasKey("Id");

                    b.ToTable("products", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ac64573c-10f7-4e9a-ab52-9a79c148c262"),
                            Category = "Clothing",
                            CreatedAt = new DateTime(2023, 9, 8, 18, 58, 25, 433, DateTimeKind.Utc).AddTicks(4449),
                            ModifiedAt = new DateTime(2023, 9, 8, 18, 58, 25, 433, DateTimeKind.Utc).AddTicks(4451),
                            Name = "Denver Jeans",
                            Price = 74.95m
                        },
                        new
                        {
                            Id = new Guid("15022ede-5c00-4348-b158-01f931bcd506"),
                            Category = "Clothing",
                            CreatedAt = new DateTime(2023, 9, 8, 18, 58, 25, 433, DateTimeKind.Utc).AddTicks(4467),
                            ModifiedAt = new DateTime(2023, 9, 8, 18, 58, 25, 433, DateTimeKind.Utc).AddTicks(4467),
                            Name = "Bershka Collar",
                            Price = 22.99m
                        },
                        new
                        {
                            Id = new Guid("a674ff3e-4a5b-4d5b-87e3-6fad2e214140"),
                            Category = "Electronics",
                            CreatedAt = new DateTime(2023, 9, 8, 18, 58, 25, 433, DateTimeKind.Utc).AddTicks(4469),
                            ModifiedAt = new DateTime(2023, 9, 8, 18, 58, 25, 433, DateTimeKind.Utc).AddTicks(4469),
                            Name = "Raspberry",
                            Price = 125.99m
                        },
                        new
                        {
                            Id = new Guid("9e418a9e-d2fe-497f-8a31-3dc78054a2f0"),
                            Category = "Electronics",
                            CreatedAt = new DateTime(2023, 9, 8, 18, 58, 25, 433, DateTimeKind.Utc).AddTicks(4471),
                            ModifiedAt = new DateTime(2023, 9, 8, 18, 58, 25, 433, DateTimeKind.Utc).AddTicks(4471),
                            Name = "Headset",
                            Price = 31.99m
                        },
                        new
                        {
                            Id = new Guid("f152c8b2-b79e-4ee6-8079-06269a7154e5"),
                            Category = "Sports",
                            CreatedAt = new DateTime(2023, 9, 8, 18, 58, 25, 433, DateTimeKind.Utc).AddTicks(4472),
                            ModifiedAt = new DateTime(2023, 9, 8, 18, 58, 25, 433, DateTimeKind.Utc).AddTicks(4472),
                            Name = "Football",
                            Price = 126.99m
                        });
                });

            modelBuilder.Entity("OrderProduct", b =>
                {
                    b.HasOne("OrderService.Domain.Models.Order", null)
                        .WithMany()
                        .HasForeignKey("OrdersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OrderService.Domain.Models.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
